import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Date;

/**
 * A TCP server that runs on port 9090.  When a client connects, it
 * sends the client the current date and time, then closes the
 * connection with that client.  Arguably just about the simplest
 * server you can write.
 */
@SuppressWarnings("unused")
public class ChatServer {
	
	static int totalMembers = 0;
	
    public static void main(String[] args) throws IOException {
        ServerSocket listener = new ServerSocket(9090);
        ChatRoom room = new ChatRoom();
        
        try {
            while (true) {
                Socket socket = listener.accept();
                System.out.println(socket.getInetAddress() + " connected!");
                
                ChatConnection connection = new ChatConnection(socket, room);
                Thread thread = new Thread(connection);
                thread.start();
            }
        } finally {
            listener.close();
        }
    }
}

class ChatConnection implements Runnable {
	
	BufferedReader input;
	PrintWriter output;
	ChatRoom room;
	
	public ChatConnection(Socket socket, ChatRoom r) {
		try {
			BufferedReader input = new BufferedReader(new InputStreamReader(socket.getInputStream()));
			PrintWriter output = new PrintWriter(socket.getOutputStream(), true);
			room = r;
		} catch (IOException error) {
			error.printStackTrace();
		}
	}

	@Override
	public void run() {
		while (true) {
			
			try {
				String i = input.readLine();
				if (i != null) {
					String action = i.substring(0, i.indexOf(':'));
					String rest = i.substring(i.indexOf(':'));
					if (action.equals("authenticate")) {
						String[] parts = rest.split("@");
						
						
					}
					if (action.equals("message")) {
						int line = room.addLine(rest);
						System.out.println(rest);
						output.println("current line: " + line);
					}
					
					room.addLine(i);
					System.out.println(i);
					
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
	
	
}
