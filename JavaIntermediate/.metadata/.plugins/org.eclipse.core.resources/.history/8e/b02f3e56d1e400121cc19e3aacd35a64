import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Timer;
import java.util.TimerTask;
 
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
 
 
public class Skype extends JFrame implements ActionListener{
       
        ChatClient client;
        JTextArea pane;
        JTextField field;
       
        public static void main(String[] args) {
                new Skype();
        }
       
        public Skype() {
                super("Skype Istant Messenger");
                setDefaultCloseOperation(EXIT_ON_CLOSE);
                setSize(new Dimension(400,600));
                client = new ChatClient();     
                
                initialize();
                Thread updateThread = new Thread(new UpdateTask());
                updateThread.start();
                setVisible(true);
        }
       
        private void initialize() {
        	pane = new JTextArea(30,30);
        	JScrollPane scroll = new JScrollPane(pane);
        	add(scroll, BorderLayout.CENTER);
        	
        	field = new JTextField(20);
        	field.addActionListener(this);
        	add(field, BorderLayout.SOUTH);
        }
 
        public void update() {
                String contents = pane.getText();
                pane.setText(contents + client.getUpdate(0));
        }
       
        @Override
        public void actionPerformed(ActionEvent e) {
                if (e.getActionCommand().equals("submit")) {
                        String message = field.getText();
                        client.submit(message);
                        field.setText("");
                        update();
                }
               
        }
       
        class UpdateTask implements Runnable {
            @Override
            public void run() {
            	while (true) {
            		try {
                		update();
                		Thread.sleep(100);
            		} catch (InterruptedException e) {
            			e.printStackTrace();
            		}
            	}                 
            }              
        }
}