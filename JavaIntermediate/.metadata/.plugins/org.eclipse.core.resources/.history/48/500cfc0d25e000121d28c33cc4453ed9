
public class PixelEffects {

	public static int[][] copy(int[][] source) {
		return resize(source,source.length, source[0].length);
	}
	/**
	 * Resize the array image to the new width and height
	 * You are going to need to figure out how to map between a pixel
	 * in the destination image to a pixel in the source image
	 * @param source
	 * @param newWidth
	 * @param newHeight
	 * @return
	 */
	public static int[][] resize(int[][] source, int newWidth, int newHeight) {
		int[][] output = new int[newWidth][newHeight];
		for (int x = 0; x < newWidth; x++) {
			for (int y = 0; y < newHeight; y++){
				int sourceX = x * (source.length / newWidth);
				int sourceY = x * (source[0].length / newHeight);
				output[x][y] = source[sourceX][sourceY];
			}
		}
		return output;
	}

	public static int[][] half(int[][] source) {
		return source;
	}
	
	public static int[][] resize(int[][] source, int[][] reference) {
		return source;
	}

	/**
	 *	Flips the image over the x-axis.
	 */
	public static int[][] flip(int[][] source) {
		int sourceWidth = source.length;
		int sourceHeight = source[0].length;
		int[][] output = new int[sourceWidth][sourceHeight];
		
		for (int x = 0; x < sourceWidth; x++) {
			for ( int y = 0; y < sourceHeight; y++) {
				int sourceX = sourceWidth - x;
				int sourceY = sourceHeight - y;
				output[x][y] = source[sourceX][sourceY];
			}
		}
		
		return output;
	}

	/**
	 *	Mirrors the image over the y-axis.
	 */
	public static int[][] mirror(int[][] source) {
		return source;
	}

	/**
	 *	Rotates the image left.
	 */
	public static int[][] rotateLeft(int[][] source) {
		return source;
	}

	/**
	 *	Rotates the image right.
	 */
	public static int[][] rotate(int[][] source) {
		int sourceWidth = source.length;
		int sourceHeight = source[0].length;
		int[][] output = new int [sourceHeight][sourceWidth];
		for (int x = 0; x < sourceWidth; x++) {
			for (int y = 0; y < sourceHeight; y++) {
				int sourceX = y;
				int sourceY = x;
				output[x][y] = source[sourceX][sourceY];
			}
		}
		
		return output;
	}
	
	/** 
	 * Merge the red,blue,green components from two images.
	 */
	public static int[][] merge(int[][] sourceA, int[][] sourceB) {
		return sourceA;
	}

	/**
	 * Replace the green areas of the foreground image with parts of the back
	 * image.
	 */
	public static int[][] chromaKey(int[][] foreImage, int[][] backImage) {
		return foreImage;
	}

	/** 
	 *	Remove redeye. Note that sourceB is not used.
	 */
	public static int[][] redeye(int[][] source, int[][] sourceB) {
		int width = source.length, height = source[0].length;
		int[][] result = new int[width][height];
		for (int i = 0; i < width; i++) {
			for (int j = 0; j < height; j++) {
				int rgb = source[i][j];
				int red = RGBUtilities.toRed(rgb);
				int green = RGBUtilities.toGreen(rgb);
				int blue = RGBUtilities.toBlue(rgb);
				if (red > 4 * Math.max(green, blue) && red > 64)
					red = green = blue = 0;
				result[i][j] = RGBUtilities.toRGB(red, green, blue);
			}
		}
		return result;
	}

	/**
	 *	Add some funk to the image.
	 */
	public static int[][] funky(int[][] source, int[][] sourceB) {
		for (int x = 0; x < source.length; x++) {
			for (int y = 0; y < source[0].length; y++) {
				randomNumber = m
			}
		}
		return source;
	}
}
