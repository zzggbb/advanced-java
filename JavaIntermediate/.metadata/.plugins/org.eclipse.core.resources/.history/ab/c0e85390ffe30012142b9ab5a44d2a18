import java.io.BufferedReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Date;

/**
 * A TCP server that runs on port 9090.  When a client connects, it
 * sends the client the current date and time, then closes the
 * connection with that client.  Arguably just about the simplest
 * server you can write.
 */
@SuppressWarnings("unused")
public class ChatServer {

	static ArrayList <Socket> members;
	static ArrayList <BufferedReader> readers;
	static ArrayList <PrintWriter> writers;
	
    public static void main(String[] args) throws IOException {
        ServerSocket listener = new ServerSocket(9090);
        members = new ArrayList <Socket> ();
        
        try {
            while (true) {
                Socket socket = listener.accept();
                members.add(socket);
                System.out.println(socket.getInetAddress() + " connected!");
                try {
                    PrintWriter out = new PrintWriter(socket.getOutputStream(), true);
                    out.println("test test test test");
                } finally {
                    socket.close();
                }
            }
        } finally {
            listener.close();
        }
    }
}
